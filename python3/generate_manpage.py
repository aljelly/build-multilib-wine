#!/bin/env python3

import datetime
import os
import sys

script_package="build-multilib-wine"
script_name="build_multilib_wine"
script_configuration_file=script_name+".conf"

def  get_script_directory():
	""" returns the directory, containing this script """
	return os.path.abspath(sys.path[0])

package_directory = get_script_directory()
while (os.path.basename(package_directory) != script_package):
    package_directory = os.path.dirname(package_directory)

now_date_time = datetime.datetime.now()

configuration_file_default = "${HOME}/.config/"+script_name+"/"+script_configuration_file
prefix_root = "${HOME}/usr"
build_root = "${HOME}/Wine/Build"
source_root = "${HOME}/Wine/Source"
working_patches_root = source_root+"/patches"

license_text = [
"",
"Copyright (C) 2016-"+now_date_time.strftime("%Y")+" Robert Walker",
"",
"This program is free software; you can redistribute it and/or modify",
"it under the terms of the GNU General Public License as published by",
"the Free Software Foundation; either version 2 of the License, or",
"(at your option) any later version.",
"",
"This program is distributed in the hope that it will be useful,",
"but WITHOUT ANY WARRANTY; without even the implied warranty of",
"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
"GNU General Public License for more details.",
"",
"You should have received a copy of the GNU General Public License along",
"with this program; if not, write to the Free Software Foundation, Inc.,",
"51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
""
]

man1_license_text=[
"", script_name+" is multilib Wine (& Wine Staging) build script"
]+license_text

man5_license_text=[
"", script_configuration_file+" is the configuration file for the "+script_name+" build script"
]+license_text

makefile_license_text=[
"", "Makefile for "+script_name+" - a multilib Wine (& Wine Staging) build script"
]+license_text

man1_page_body=[
".TH BUILD_MULTILIB_WINE 1 "+now_date_time.strftime("\"%d %b %Y\"")+".SH NAME",
"\\fBbuild_multilib_wine\\fR \- monolithic BASH script to build multilib Wine, from source, on Debian or Ubuntu™",
".SH SYNOPSIS",
"\\fBbuild_multilib_wine\\fR [ \\fB--colour\\fR=... ] [ \\fB--logging\\fR=... ] [ \\fB--log-compression\\fR... ] [\\fB--log-directory\\fR=... ] [ *\\fIOPTION (build phase)\\fR [ ... *\\fIOPTION (build phase)\\fR ] ] [--] [ \\fBsrc-fetch\\fR ] [ \\fBsrc-prepare\\fR ] [ \\fBsrc-configure\\fR ] [ \\fBsrc-compile\\fR ] [ \\fBsrc-install\\fR ] | \\fBbuild-all\\fR",
".br",
"\\fBbuild_multilib_wine\\fR [ \\fB--colour\\fR=... ] [--] \\fBgenerate-conf\\fR",
".br",
"\\fBbuild_multilib_wine\\fR [ \\fB--colour\\fR=... ] [ \\fB--logging\\fR=... ] [ \\fB--log-compression\\fR... ] [\\fB--log-directory\\fR=... ] [--] \\fBsetup-chroot\\fR | \\fBupgrade-chroot\\fR",
".br",
"\\fBbuild_multilib_wine\\fR [ \\fB--colour\\fR=... ] [--] \\fBversion\\fR",
".SS \\fI*OPTION (build phase)\\fR :",
".br",
"[ \\fB--build-directory\\fR \\fIdirectory\\fR ]  [ \\fB--patch-directory\\fR \"\\fIdirectory\\fR(1)\" [ ... \\fB--patch-directory \"\\fIdirectory\\fR(N)\" ] ]  [ \\fB--source-directory\\fR \\fIdirectory\\fR ]  [ \\fB--prefix\\fR \\fIdirectory\\fR ] ",
".br",
"\\fB--wine-staging\\fR=\"\\fIno\\fR\" | \"\\fIfalse\\fR\" | \"\\fI0\\fR\"  [ \\fB--wine-branch\\fR=\\fIgit-branch\\fR         | \\fB--wine-commit\\fR=\"\\fIcommit-hash\\fR\"         | \\fB--wine-version\\fR=\\fInumeric-version\\fR         ] ",
".br",
"\\fB--wine-staging\\fR=\"\\fIyes\\fR\" | \"\\fItrue\\fR\" | \"\\fI1\\fR\"  [ \\fB--wine-staging-branch\\fR=\\fIgit-branch\\fR | \\fB--wine-staging-commit\\fR=\"\\fIcommit-hash\\fR\" | \\fB--wine-staging-version\\fR=\\fInumeric-version\\fR ] ",
".SH \"DESCRIPTION\"",
"This manual page describes the",
".BR build_multilib_wine",
"command.",
".br",
"The ",
".BR build_multilib_wine",
"script can be used to build Wine, or Wine Staging, with the option",
"to specify multiple directories of additional user patchsets. The script supports building",
"Wine on the Debian and Ubuntu™ Linux distributions (Ubuntu™-derivatives, like Linux-Mint,",
"are also supported). The script uses dual chroot (Schroot) environments (32-bit and 64-bit).",
".P",
".BR build_multilib_wine ",
"supports various simple commands. \\fI Note:\\fR build phase options can only be combined with build commands.",
".br",
".SS Exit status:",
".TP",
"0",
"if OK (successful execution),",
".TP",
"1",
"if any error occurs during execution.",
".SH OPTIONS",
".SS Global",
".TP",
"\\fB\-\-colour\\fR=[ \"\\fIyes\\fR\" | \"\\fIno\\fR\" | \"\\fItrue\\fR\" | \"\\fIfalse\\fR\" | \"\\fI1\\fR\" | \"\\fI0\\fR\" ]\"",
"Select whether terminal output and logs are colourised or not.",
".TP",
"\\fB\-\-logging\\fR=[ \"\\fIyes\\fR\" | \"\\fIno\\fR\" | \"\\fItrue\\fR\" | \"\\fIfalse\\fR\" | \"\\fI1\\fR\" | \"\\fI0\\fR\" ]\"",
"Select whether all terminal output is written to a time/date-stamped log file.",
".TP",
"\\fB\-\-log\-compression\\fR=[ \"\\fIbzip2\\fR\" | \"\\fIgzip\\fR\" | \"\\fIlzma\\fR\" | \"\\fIlzop\\fR\" | \"\\fInone\\fR\" | \"\\fIlz4\\fR\" | \"\\fIxz\\fR\" ]",
"Select whether all terminal output is written to a time/date-stamped log file.",
".TP",
"\\fB\-\-log\-directory\\fR=\\fIdirectory\\fR",
"Use the specified directory, to store the log file, for the current command.",
".SS Build Phases (only)",
".TP",
"\\fB\-\-wine\-staging\\fR=[ \"\\fIyes\\fR\" | \"\\fIno\\fR\" | \"\\fItrue\\fR\" | \"\\fIfalse\\fR\" | \"\\fI1\\fR\" | \"\\fI0\\fR\" ]\"",
"Select whether to build Wine or Wine Staging.",
".TP",
"\\fB\-\-wine\-branch\\fR=\\fIgit\-branch\\fR",
"Select the Wine git branch to build.",
".TP",
"\\fB\-\-wine\-commit\\fR=\\fIcommit\-hash\\fR",
"Select a specific Wine git commit to build against.",
".TP",
"\\fB\-\-wine\-version\\fR=\\fInumeric\-version\\fR",
"Select a specific Wine version to build.",
".TP",
"\\fB\-\-wine\-staging\-branch\\fR=\\fIgit\-branch\\fR",
"Select the Wine Staging git branch to build.",
".TP",
"\\fB\-\-wine\-staging\-commit\\fR=\\fIcommit\-hash\\fR",
"Select a specific Wine Staging git commit to build against.",
".TP",
"\\fB\-\-wine\-staging\-version\\fR=\\fInumeric\-version\\fR",
"Select a specific Wine Staging version to build.",
".TP",
"\\fB\-\-build\-directory\\fR \\fIdirectory\\fR",
"Select the root build directory (stores Wine build trees and log files)",
".TP",
"\\fB\-\-patch\-directory\\fR \\fIdirectory\\fR(1) [ ... \\fB\-\-patch\-directory\\fR \\fIdirectory\\fR(N) ]",
"Specify a directory (or directories) containing user patches.",
".TP",
"\\fB\-\-source\-directory\\fR \\fIdirectory\\fR",
"Select the root source directory (stores generic/stock patches, Wine and Wine Staging git trees)",
".TP",
"\\fB\-\-prefix\\fR \\fIdirectory\\fR",
"Specify a target root directory, in which to install the multilib Wine build.",
".br",
"\\fINote\\fR: this must be a subdirectory of the user's \"\\fIHOME\\fR\" directory.",
".br",
"The \\fIHOME\\fR directory is a writeable mountpoint, accessible within both Schroot environments."
"",
".SH COMMANDS",
".TP",
".BR generate-conf",
"Generate a stock configuration file for build_multilib_wine.",
"The default location for this newly created configuration file, is:",
".br",
".I  \*(lq"+configuration_file_default+"\*(rq",
".TP",
".BI setup-chroot",
"Setup the 32-bit and 64-bit (Schroot) Chroot Environments.",
"This command also installs the Debian / Ubuntu™ base development libraries for Wine, in the dual Chroot Environments.",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".TP",
".BI upgrade-chroot",
"Upgrade the packages installed to the 32-bit and 64-bit (Schroot) Chroot Environments.",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".SS (1)-(5)",
".TP",
".B build-all",
".br",
"Meta-command, alias for the sequence of commands: \\fBsrc-fetch\\fR \\fBsrc-prepare\\fR \\fBsrc-configure\\fR \\fBsrc-compile\\fR \\fBsrc-install\\fR",
".br",
"(for further information, see below)",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".SS (1)",
".TP",
".B src-fetch",
".br",
"Run the (git) source fetch phase, for wine, and wine-staging, git trees.",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".SS (2)",
".TP",
".B src-prepare",
".br",
"Run source prepare phase. During this phase, base patches are applied and (BASH/sed) configuration file alterations are made.",
"In addition, during this phase, the Wine Staging patchset and any (specified) user patchsets are applied.",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".SS (3)",
".TP",
".B src-configure",
".br",
"Run source configure phase. This phase is executed once in 32-bit Chroot environment: wine32-tools ; and once in the 64-bit Chroot environment: wine64",
".br",
"\\fINote\\fR: running the configure phase for the 32-bit Chroot: wine32 ; is deferred to the end of the next (src-compile) phase.",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".SS (4)",
".TP",
".B src-compile",
".br",
"Run source compile phase. This phase is executed once in 32-bit Chroot environment: wine32-tools ; and once in the 64-bit Chroot environment: wine64",
"The (deferred) configure phase for the 32-bit Chroot directory: wine32 ; is run first in this phase. Then the build directory: wine32 ; is compiled.",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".SS (5)",
".TP",
".B src-install",
".br",
"Run source install phase. This phase is executed once for the 32-bit Chroot environment: wine32 ; and once for the 64-bit Chroot environment directory: wine64",
".br",
"\\fINote\\fR: the install prefix must be a subdirectory of the user's \\fIHOME\\fR directory.",
"This is because the \\fIHOME\\fR directory is a writeable mountpoint, accessible within both Schroot environments.",
".br",
"\\fINote\\fR: this command runs as \\fBroot\\fR.",
".TP",
".BI version",
"Display the script version and exit.",
".SH \"AUTHOR\"",
"Written by Robert Walker <bob.mt.wya@gmail.com>",
".SH \"REPORTING BUGS\"",
"Please report issues at: <\\fIhttps://github.com/bobwya/build-multilib-wine/issues\\fR>",
".SH \"SEE ALSO\"",
".BR build_multilib_wine.conf (5)."
]



man5_page_body=[
".TH \"BUILD_MULTILIB_WINE.CONF\" \"5\" "+now_date_time.strftime("\"%d %b %Y\""),
".SH \"NAME\"",
"build_multilib_wine.conf \- custom settings for controlling the build_multilib_wine",
"script",
".SH \"SYNOPSIS\"",
"\\fB"+configuration_file_default+"\\fR",
".SH \"DESCRIPTION\"",
"",
"This file contains various variables that are used, by the build_multilib_wine",
"script, to change the default settings for any operation. The file has a",
"newline\-delimited list of \\fI<key>=<value>\\fR pairs. To generate a basic:",
"\\fB"+configuration_file_default+"\\fR",
"file, with defaults indicated (commented out), use:",
"build_multilib_wine generate_conf",
"which will write a generic version of the (above) file.",
".br",
"\\fINote:\\fR \\fBbuild_multilib_wine\\fR will pre-parse the \\fBbuild_multilib_wine.conf\\fR",
"testing that all variables are defined correctly (via various regex tests, etc.).",
".br",
"build_multilib_wine will check for settings/value overrides in the following order of precedence:",
".SS (1)",
"env variables,",
".SS (2)",
"build_multilib_wine.conf configuration,",
".SS (3)",
"build_multilib_wine: command-line options,",
".TP",
".SS \\fRwhere: \\fB(1)\\fR=lowest priority ... \\fB(3)\\fR=highest priority.",
".br",
".SH \"VARIABLES\"",
".TP",
"\\fBBUILD_ROOT\\fR=\\fIdirectory\\fR",
"Root directory where the binary builds are stored - \"out-of-tree\" build.",
"By default, log files are stored in a subdirectory of the \\fBBUILD_ROOT\\fR directory.",
".br",
"Defaults to: \\fBBUILD_ROOT\\fR=\"\\fI"+build_root+"\\fR\"",
".TP",
"\\fBCOLOUR\\fR=[ \"\\fIyes\\fR\" | \"\\fIno\\fR\" | \"\\fI1\\fR\" | \"\\fI0\\fR\" | \"\\fItrue\\fR\" | \"\\fIfalse\\fR\" ]",
"Select whether to colourise, or not, all terminal and log output.",
".br",
"Defaults to: \\fBCOLOUR\\fR=\"\\fIfalse\\fR\"",
".TP",
"\\fBLOG_COMPRESSION\\fR=[ \"\\fIzip2\\fR\" | \"\\fIgzip\\fR\" | \"\\fIlzma\\fR\" | \"\\fIlzop\\fR\" | \"\\fInone\\fR\" | \"\\fIlz4\\fR\" | \"\\fIxz\\fR\" ]",
"Compression to be applied to new log files. Log files are only compressed, when",
"the script is exiting. Supported compression algorithms are listed above.",
".br",
"Defaults to: \\fBLOG_COMPRESSION\\fR=\"\\fIxz\\fR\"",
".TP",
"\\fBLOG_DIRECTORY\\fR=\\fIdirectory\\fR",
"Directory, in which to store log files. The log files record all script output.",
".br",
"Defaults to: \\fBLOG_DIRECTORY\\fR=\"\\fI"+build_root+"/Logs\\fR\"",
".TP",
"\\fBLOGGING\\fR=[ \"\\fIyes\\fR\" | \"\\fIno\\fR\" | \"\\fI1\\fR\" | \"\\fI0\\fR\" | \"\\fItrue\\fR\" | \"\\fIfalse\\fR\" ]",
"Enable or disable logging, of all script output. Only applies to build and chroot commands.",
".br",
"Defaults to: \\fBLOGGING\\fR=\"\\fItrue\\fR\"",
".TP",
"\\fBLSB_CODENAME\\fR=\"\\fILSB codename\\fR\"",
"OS release override (e.g. cross-building for another Debian / Ubuntu version).",
".br",
"Defaults to: \\fBLSB_CODENAME\\fR=\"\\fI$(lsb_release -sc)\\fR\"",
".TP",
"\\fBPREFIX\\fR=\\fIdirectory\\fR",
"Installation prefix directory in which Wine libraries, binaries, etc. are installed.",
".br",
"Defaults to: \\fBPREFIX\\fR=\"\\fI"+prefix_root+"\\fR\"",
".TP",
"\\fBSOURCE_ROOT\\fR=\\fIdirectory\\fR",
"Root directory where sources are stored i.e. clones of Wine (and Wine-Staging) Git trees.",
".br",
"Defaults to: \\fBSOURCE_ROOT\\fR=\"\\fI$"+source_root+"\\fR\"",
".TP",
"\\fBTHREADS\\fR=\\fICPU thread count\\fR",
"Number of processor threads to use, when compiling. Used by \\fBWINE_MAKE_OPTIONS\\fR.",
".br",
"Defaults to: \\fBTHREADS\\fR=\\fIhardware CPU threads+1\\fR",
".TP",
"\\fBUSER_PATCH_DIRECTORIES\\fR=( \\fIdirectory\\fR(0) [ ... \\fIdirectory\\fR(N) ] )",
"Array of one (or more) directories containing \"non-official\" user patch files.",
".br",
"Additional array entries can be added using:",
".br",
"    \\fBUSER_PATCH_DIRECTORIES\\fR+=( \\fIdirectory\\fR(N+1) [ ... \\fIdirectory\\fR(M) ] )",
".br",
"\\fINote:\\fR patches must formatted in a -p1 diff format).",
".br",
"Defaults to: \\fBUSER_PATCH_DIRECTORIES\\fR=\\fInone\\fR",
".TP",
"\\fBWINE_ADDON_GLOBAL\\fR=[ \"\\fIyes\\fR\" | \"\\fIno\\fR\" | \"\\fI1\\fR\" | \"\\fI0\\fR\" | \"\\fItrue\\fR\" | \"\\fIfalse\\fR\" ]",
"Specifies where the wine-addons: \\fIwine-gecko\\fR , \\fIwine-mono\\fR ; will be installed to.",
".br",
"\\fBWINE_ADDON_GLOBAL\\fR=1 : install wine-addons relative to the user \\fIHOME\\fR directory ( \"\\fI${HOME%/}${WINE_ADDON_GLOBAL_RELPATH%/}\\fR\" )",
".br",
"\\fBWINE_ADDON_GLOBAL\\fR=0 : install wine-addons relative to the Wine installation path ( \"\\fI${PREFIX%/}/${WINE_ADDON_RELPATH#/}\\fR\" )",
".br",
"Using: \\fBWINE_ADDON_GLOBAL\\fR=1 ; allows wine-addons to be shared between different Wine installations.",
".br",
"Defaults to: \\fBWINE_ADDON_GLOBAL\\fR=\"\\fI${WINE_ADDON_GLOBAL}\\fR\"",
".TP",
"\\fBWINE_ADDON_GLOBAL_RELPATH\\fR=\\fIrelative directory path\\fR",
"Specifies the install path for wine-addons: \\fIwine-gecko\\fR , \\fIwine-mono\\fR ; activated with: \\fBWINE_ADDON_GLOBAL\\fR=1.",
".br",
"\\fBWINE_ADDON_GLOBAL_RELPATH\\fR specifies a path relative to: \"\\fI${HOME%/}\\fR\".",
".br",
"It is not recommended to change this variable, as Wine has fixed paths, which are searched for addons.",
".br",
"Defaults to: \\fBWINE_ADDON_GLOBAL_RELPATH\\fR=\"\\fI${WINE_ADDON_GLOBAL_RELPATH}\\fR\"",
".TP",
"\\fBWINE_ADDON_RELPATH\\fR=\\fIrelative directory path\\fR",
".br",
"Specifies the install path for wine-addons: \\fIwine-gecko\\fR , \\fIwine-mono\\fR ; activated with: \\fBWINE_ADDON_GLOBAL\\fR=0.",
".br",
"\\fBWINE_ADDON_RELPATH\\fR specifies a path relative to: \"\\fI${PREFIX%/}\\fR\".",
".br",
"It is not recommended to change this variable, as Wine has fixed paths, which are searched for addons.",
".br",
"Defaults to: \\fBWINE_ADDON_RELPATH\\fR=\"\\fI${WINE_ADDON_RELPATH}\\fR\"",
".TP",
"\\fBWINE_BRANCH\\fR=\\fIgit-branch\\fR",
"Wine git branch to build against. This variable applies only during build commands.",
".br",
"Requires that the Wine Staging patchset is disabled, for the current Wine build:",
".br",
"    \\fBWINE_STAGING\\fR=\"\\fIfalse\\fR\"   (configuration option)",
".br",
"    \\fB--wine-staging\\fR=\"\\fIfalse\\fR\" (build option, command line argument)",
".br",
"Defaults to: \\fBWINE_BRANCH\\fR=\"\\fIrefs/heads/master\\fR\"",
".TP",
"\\fBWINE_CFLAGS\\fR=\\fICFLAGS argument (configure script)\\fR",
"CFLAGS ('C' compiler flags) to pass to Wine configure script.",
"[src-configure]",
".br",
"Defaults to: \\fBWINE_CFLAGS\\fR=\"\\fI-march=native -mtune=native\\fR\"",
".TP",
"\\fBWINE_COMMIT\\fR=\\fIgit-commit\\fR",
"Wine git commit to build against. This variable applies only during build commands.",
".br",
"Requires that the Wine Staging patchset is disabled, for the current Wine build:",
".br",
"    \\fBWINE_STAGING\\fR=\"\\fIfalse\\fR\"   (configuration option)",
".br",
"    \\fB--wine-staging\\fR=\"\\fIfalse\\fR\" (build option, command line argument)",
".br",
"Defaults to: \\fBWINE_COMMIT\\fR=\\fInone\\fR",
".TP",
"\\fBWINE_CONFIGURATION\\fR=\"\\fIconfigure options\\fR\"",
"Specify options to pass to the Wine configuration phase.",
"[src-configure]",
".br",
"Defaults to: \\fBWINE_CONFIGURATION\\fR=\"\\fI--without-hal --without-v4l --without-oss\\fR\"",
".TP",
"\\fBWINE_MAKE_OPTIONS\\fR=\\fIarguments to make command\\fR",
"Make options to pass to the make command, when compiling wine.",
"[src-compile]",
".br",
"Defaults to: \\fBWINE_MAKE_OPTIONS\\fR=\"-j\\fI$((THREADS+1))\"",
".TP",
"\\fBWINE_STAGING\\fR=[ \"\\fIyes\\fR\" | \"\\fIno\\fR\" | \"\\fI1\\fR\" | \"\\fI0\\fR\" | \"\\fItrue\\fR\" | \"\\fIfalse\\fR\" ]",
"A build phase (only) option that specifies whether we wish to apply (or not) the Wine Staging patchsets.",
".br",
"The default is to apply all the Wine Staging patchsets, with some (optional) Wine Staging patchset exclusions specified by:",
".br",
"\\fBWINE_STAGING_EXCLUDE\\fR=... (see below, for more information about this option)",
".br",
"Defaults to: \\fBWINE_STAGING\\fR=\"0\"",
".TP",
"\\fBWINE_STAGING_BRANCH\\fR=\\fIgit-branch\\fR",
"Wine-Staging git branch to build against. This variable applies only during build commands.",
".br",
"Requires that the Wine Staging patchset is enabled, for the current Wine build:",
".br",
"    \\fBWINE_STAGING\\fR=\"\\fItrue\\fR\"   (configuration option)",
".br",
"    \\fB--wine-staging\\fR=\"\\fItrue\\fR\" (build option, command line argument)",
".br",
"Defaults to: \\fBWINE_STAGING_BRANCH\\fR=\"\\fIrefs/heads/master\\fR\"",
".TP",
"\\fBWINE_STAGING_COMMIT\\fR=\\fIgit-commit\\fR",
"Wine-Staging git commit to build against. This variable applies only during build commands.",
".br",
"Requires that the Wine Staging patchset is enabled, for the current Wine build:",
".br",
"    \\fBWINE_STAGING\\fR=\"\\fItrue\\fR\"   (configuration option)",
".br",
"    \\fB--wine-staging\\fR=\"\\fItrue\\fR\" (build option, command line argument)",
".br",
"Defaults to: \\fBWINE_STAGING_COMMIT\\fR=\\fI<none>\\fR",
".TP",
"\\fBWINE_STAGING_EXCLUDE\\fR=\\fIpatchset\\fR(1) [ ... \\fIpatchset\\fR(N) ]",
"Name(s) of specific Wine-Staging patchset(s), to optionally disable.",
"[src-prepare]",
".br",
"Defaults to: \\fBWINE_STAGING_EXCLUDE\\fR=\"\\fIconfigure-OSMesa winhlp32-Flex_Workaround\\fR\"",
".TP",
"\\fBWINE_STAGING_VERSION\\fR=\\fInumeric-version\\fR",
"Wine-Staging version to build. Specified as a wine-staging release version (without the git tag prefix).",
".br",
"This variable applies only during build commands.",
".br",
"Requires that the Wine Staging patchset is enabled, for the current Wine build:",
".br",
"    \\fBWINE_STAGING\\fR=\"\\fItrue\\fR\"   (configuration option)",
".br",
"    \\fB--wine-staging\\fR=\"\\fItrue\\fR\" (build option, command line argument)",
".br",
"Defaults to: \\fBWINE_STAGING_VERSION\\fR=\\fInone\\fR",
".TP",
"\\fBWINE_VERSION\\fR=\\fInumeric-version\\fR",
"Wine version to build. Specified as a wine release version (without the git tag prefix).",
".br",
"This variable applies only during build commands.",
".br",
"Requires that the Wine Staging patchset is disabled, for the current Wine build:",
".br",
"    \\fBWINE_STAGING\\fR=\"\\fIfalse\\fR\"   (configuration option)",
".br",
"    \\fB--wine-staging\\fR=\"\\fIfalse\\fR\" (build option, command line argument)",
".br",
"Defaults to: \\fBWINE_VERSION\\fR=\\fInone\\fR",
".TP",
"\\fBWORKING_PATCHES_DIRECTORY\\fR=\\fIdirectory\\fR",
"Directory to store additional stock Wine patches.",
".br",
"Defaults to: \\fBWORKING_PATCHES_DIRECTORY\\fR=\"\\fI"+working_patches_root+"\\fR\"",
".br",
".SH \"REPORTING BUGS\"",
"Please report issues at: <\\fIhttps://github.com/bobwya/build-multilib-wine/issues\\fR>",
".SH \"AUTHORS\"",
".nf",
"Written by Robert Walker <bob.mt.wya@gmail.com>",
".fi",
".SH \"FILES\"",
".TP",
"\\fI"+configuration_file_default+"\\fR",
"Contains variables for controlling the operation of the build_multilib_wine script.",
".SH \"SEE ALSO\"",
".br",
".BR build_multilib_wine (1)."
]

man_path = os.path.join(package_directory, "man/build_multilib_wine.1")
if not os.path.exists(os.path.dirname(man_path)):
	os.mkdir(os.path.dirname(man_path))

fh_man = open(man_path, "w")

for line in man1_license_text:
	fh_man.write(".\\\" " + line + "\n")

for line in man1_page_body:
	fh_man.write(line + "\n")

fh_man.close()

man_path = os.path.join(package_directory, "man/build_multilib_wine.conf.5")
if not os.path.exists(os.path.dirname(man_path)):
	os.mkdir(os.path.dirname(man_path))

fh_man = open(man_path, "w")

for line in man5_license_text:
	fh_man.write(".\\\" " + line + "\n")

for line in man5_page_body:
	fh_man.write(line + "\n")

fh_man.close()


